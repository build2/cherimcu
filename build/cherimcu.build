# Let's use the cc module to get us the compiler paths, extract the target
# etc. This only work if the compiler is reasonably GCC/Clang-like.
#
# If that's not the case, the alternative approach is to just import the
# compiler executables and use that instead of {c,cxx}.path below, something
# along these lines:
#
# import! c = clang%exe{clang}
# import! cxx = clang%exe{clang++}
#
# Note that in this case all the {cc,c,cxx}.* variables will also have to be
# replaced with custom versions (or thrown away if not applicable).
#
cxx.std = latest

using c.config
using cxx.config

#assert ($cc.target == 'cheri-unknown-mcu') "compiler targeting cheri-unknown-mcu expected"

# C and C++ source files.
#
define h: file
define c: file

define hxx: file
define cxx: file

h{*}: extension = h
c{*}: extension = c

hxx{*}: extension = hh
cxx{*}: extension = cc

# Library and compartment object files.
#
# Because these are compiled differently, we've made them distinct target
# types so that we can have distinct rules.
#
define objlib: file
objlib{*}: extension = o

define objcom: file
objcom{*}: extension = o

# Library and compartment files.
#
define library: file
library{*}: extension = a

define compart: file
compart{*}: extension = so

# Thread target.
#
# Note that this is a non-file target (similar to make's PHONY) that is meant
# to carry thread information in the following target-specific variables:
#
# [string] compartment          = 'example'
# [uint64] priority             = 1
# [string] entry_point          = 'entry_point'
# [uint64] stack_size           = 0x400
# [uint64] trusted_stack_frames = 2
#
define thread: alias
thread{*}:
{
  [string, visibility=target] compartment          = [null]
  [uint64, visibility=target] priority             = [null]
  [string, visibility=target] entry_point          = [null]
  [uint64, visibility=target] stack_size           = [null]
  [uint64, visibility=target] trusted_stack_frames = [null]
}

# Firmware file.
#
define firmware: file
firmware{*}: extension =

# Regex pattern rules for compiling C and C++ source files to library and
# compartment object files.
#
# For now we extract header dependencies as by-product of compilation which
# means we have to list any auto-generated headers as prerequisites
# explicitly. But we could switch to the pre-extraction with -MG if we wanted
# to support auto-generated headers automatically. For details, see:
# https://build2.org/release/0.15.0.xhtml#dyndep
#
[rule_name=c_compile_library] objlib{~'/(.*)/'}: c{~'/\1/'}
{{
  s = $path($<[0])
  o = $path($>)
  t = $(o).t

  poptions = $c.poptions $cc.poptions
  coptions = $cc.coptions $c.coptions

  depdb dyndep --byproduct --what=header --default-type=h --file $t

  diag c --library ($<[0])

  $c.path $poptions $coptions $c.mode -MD -MF $t -o $o -c $s
}}

[rule_name=cxx_compile_library] objlib{~'/(.*)/'}: cxx{~'/\1/'}
{{
  s = $path($<[0])
  o = $path($>)
  t = $(o).t

  poptions = $cxx.poptions $cc.poptions
  coptions = $cc.coptions $cxx.coptions

  depdb dyndep --byproduct --what=header --default-type=h --file $t

  diag c++ --library ($<[0])

  $cxx.path $poptions $coptions $cxx.mode -MD -MF $t -o $o -c $s
}}

[rule_name=c_compile_compart] objcom{~'/(.*)/'}: c{~'/\1/'}
{{
  s = $path($<[0])
  o = $path($>)
  t = $(o).t

  poptions = $c.poptions $cc.poptions
  coptions = $cc.coptions $c.coptions

  depdb dyndep --byproduct --what=header --default-type=h --file $t

  diag c --compart ($<[0])

  # Get the compartment target-specific value.
  #
  c = $compartment

  if $empty($c)
    exit "compartment variable is not set for ([name] $>)"
  end

  # If the source file has the same name as the compartment, pass some
  # additional options.
  #
  if ($name($<[0]) == $c)
    poptions += -DCOMPARTMENT=\"$c\"
  end

  $c.path $poptions $coptions $c.mode -fPIC -MD -MF $t -o $o -c $s
}}

[rule_name=cxx_compile_compart] objcom{~'/(.*)/'}: cxx{~'/\1/'}
{{
  s = $path($<[0])
  o = $path($>)
  t = $(o).t

  poptions = $cxx.poptions $cc.poptions
  coptions = $cc.coptions $cxx.coptions

  depdb dyndep --byproduct --what=header --default-type=h --file $t

  diag c++ --compart ($<[0])

  # Get the compartment target-specific value.
  #
  c = $compartment

  if $empty($c)
    exit "compartment variable is not set for ([name] $>)"
  end

  # If the source file has the same name as the compartment, pass some
  # additional options.
  #
  if ($name($<[0]) == $c)
    poptions += -DCOMPARTMENT=\"$c\"
  end

  $cxx.path $poptions $coptions $cxx.mode -fPIC -MD -MF $t -o $o -c $s
}}

# Regex pattern rule for linking libraries and compartments from one or
# more object files.
#
# @@ Q: what tool do we use to link a library (compiler, linker directly)?
# @@ Q: what tool do we use to link a compartment (compiler, linker directly)?
#
[rule_name=link_library] library{~'/(.*)/'}: objlib{~'/(.*)/'}
{{
  s = $path($filter($<, objlib))
  o = $path($>)

  diag ld --library $>

  ar cr $o $s
}}

[rule_name=link_compart] compart{~'/(.*)/'}: objcom{~'/(.*)/'}
{{
  s = $path($filter($<, objcom))
  o = $path($>)

  loptions = $cc.loptions $cxx.loptions
  libs     = $cxx.libs $cc.libs

  diag ld --compart $>

  $cxx.path $loptions $cxx.mode -shared -o $o $s $libs
}}

# Regex pattern rule for linking the firmware from one or more compartments
# and one or more threads.
#
[rule_name=link_firmware] firmware{~'/(.*)/'}: compart{~'/(.*)/'} \
                                               thread{~'/(.*)/'}
{{
  # Extract into parallel arrays and change-track the thread information.
  #
  # Note that we can only query target-specific variables in the depdb
  # preamble of the recipe because they are not automatically change-tracked.
  #
  t_coms = [strings]
  t_pris = [uint64s]
  t_ents = [strings]
  t_stks = [uint64s]
  t_tsfs = [uint64s]

  threads = $filter($<, thread)

  # @@ TODO: Check that all the values are present.
  #
  for t: $threads
    t_coms += $($t: compartment)
    t_pris += $($t: priority)
    t_ents += $($t: entry_point)
    t_stks += $($t: stack_size)
    t_tsfs += $($t: trusted_stack_frames)
  end

  depdb hash $t_coms
  depdb hash $t_pris
  depdb hash $t_ents
  depdb hash $t_stks
  depdb hash $t_tsfs

  diag ld --firmware $>

  thread_count = $size($threads)
  compart_names = [strings] $name($filter($<, compart))

  # Verify the compartments specified in threads exist.
  #
  for i: $integer_sequence(0, $thread_count)
    c = ($t_coms[$i])

    if! $find($compart_names, $c)
      exit "unknown compartment $c in ([name] $threads[$i])"
    end
  end

  s = $path($filter($<, compart library))
  o = $path($>)

  load = $(o)-loader.cc
  schd = $(o)-scheduler.cc
  lscr = $(o)-linker-script.cc

  loptions = $cc.loptions $cxx.loptions
  libs     = $cxx.libs $cc.libs

  # This should probably come from a static header.
  #
  thread_def = \
  '
  #include <cstdint>

  struct thread
  {
    const char*    compartment;
    std::uint64_t  priority;
    const char*  (*entry_point) ();
    std::uint64_t  stack_size;
    std::uint64_t  trusted_stack_frames;
  };'

  # Generate the loader.
  #
  # Hint: "EOF" means with expansion ($, (), etc) while EOF means without.
  #
  # Hint: to disable automatic cleanup of this file at the end of the recipe
  # (for example, for troubleshooting) uncomment the corresponding &! cleanup
  # specification below.
  #
  cat <<"EOF" >$load # &!$load
  EOF

  # Map compartment entry points to thread entry points (this is a bit silly,
  # admittedly, but the setup description is quite fuzzy on the exact
  # semantics, so this is just an illustration).
  #
  for i: $integer_sequence(0, $thread_count)
    t_com = ($t_coms[$i])
    t_ent = ($t_ents[$i])

    cat <<"EOF" >>$load
      extern "C" const char* $t_com \(\);
      extern "C" const char* $t_ent \(\)
      {
        return $t_com \(\);
      }
    EOF
  end

  # Generate the scheduler.
  #
  cat <<"EOF" >$schd # &!$schd
  $thread_def
  EOF

  # Entry point declarations (defined by the loader).
  #
  for t_ent: $t_ents
    cat <<"EOF" >>$schd
      extern "C" const char* $t_ent \(\);
    EOF
  end

  cat <<"EOF" >>$schd
  thread threads[$thread_count] = {
  EOF

  for i: $integer_sequence(0, $thread_count)
    t_com = ($t_coms[$i])
    t_pri = ($t_pris[$i])
    t_ent = ($t_ents[$i])
    t_stk = ($t_stks[$i])
    t_tsf = ($t_tsfs[$i])
    cat <<"EOF" >>$schd
      {"$t_com", $t_pri, &$t_ent, $string($t_stk, 16, 8), $t_tsf},
    EOF
  end

  echo '};' >>$schd

  # Generate the linker script.
  #
  # Actually it's a source file with main() that ties everything together
  # (i.e., this is our mock "linker script").
  #
  cat <<"EOF" >$lscr # &!$lscr
  #include <cstddef>

  $thread_def

  const std::size_t thread_count = $thread_count;
  extern thread threads[thread_count];
  EOF

  cat <<EOF >>$lscr
  #include <iostream>

  using namespace std;

  int main ()
  {
    for (size_t i (0); i != thread_count; ++i)
    {
      const thread& t (threads[i]);

      cerr << "starting thread " << i << " in " << t.compartment << ": "
           << t.entry_point () << endl;
    }
  }
  EOF

  $cxx.path $loptions $cxx.mode -o $o $load $schd $lscr $s $libs
}}
